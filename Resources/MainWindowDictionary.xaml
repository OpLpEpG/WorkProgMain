<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:vm="clr-namespace:WorkProgMain.ViewModels"
                    xmlns:v="clr-namespace:WorkProgMain.Views"
                    xmlns:res="clr-namespace:WorkProgMain.Properties"
                    xmlns:c="clr-namespace:Core;assembly=Core"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"                           
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <!--<Image x:Key="DockBottomKey" Source="/Images/DockBottom.PNG" />-->
    <SolidColorBrush x:Key="SystemButtonsInactiveForeground" Color="#818183" />
    <SolidColorBrush x:Key="SystemButtonsMousePressedForeground" Color="White" />
    <SolidColorBrush x:Key="SystemButtonsMousePressedBackground" Color="#007ACC" />

    <Style x:Key="CloseButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ToolTip" Value="Close"/>
        <Setter Property="Background" Value="{Binding Background, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Path Width="46" Height="32" StrokeThickness="1" Stroke="{TemplateBinding Foreground}" Data="M 18,11 27,20 M 18,20 27,11" Margin="0,2,0,0"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{x:Static SystemColors.ControlLightLightBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsMousePressedForeground}"/>
                            <Setter Property="Background" Value="{DynamicResource SystemButtonsMousePressedBackground}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsActive, 
                                RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsInactiveForeground}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaximizeButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ToolTip" Value="Maximize"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>

        <Setter Property="Background" Value="{Binding Background, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Path x:Name="MaximizePath" Width="46" Height="32" Data="M 18.5,10.5 H 27.5 V 19.5 H 18.5 Z" 
                                  Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Margin="0,2,0,0"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{x:Static SystemColors.ControlLightLightBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsMousePressedForeground}"/>
                            <Setter Property="Background" Value="{DynamicResource SystemButtonsMousePressedBackground}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, 
                                AncestorType={x:Type Window}}}" Value="Maximized">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsInactiveForeground}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RestoreDownButton" TargetType="{x:Type Button}">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ToolTip" Value="Restore Down"/>

        <Setter Property="Background" Value="{Binding Background, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Path x:Name="RestoreDownPath" Width="46" Height="32" Data="M 18.5,12.5 H 25.5 V 19.5 H 18.5 Z M 20.5,12.5 V 10.5 H 27.5 V 17.5 H 25.5" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Margin="0,2,0,0"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter Property="Background" Value="{DynamicResource SystemButtonsMouseOverBackground}"/>-->
                            <Setter Property="Background" Value="{x:Static SystemColors.ControlLightLightBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsMousePressedForeground}"/>
                            <Setter Property="Background" Value="{DynamicResource SystemButtonsMousePressedBackground}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Maximized">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsInactiveForeground}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MinimizeButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="RenderOptions.EdgeMode" Value="Aliased"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="ToolTip" Value="Minimize"/>
        <Setter Property="Background" Value="{Binding Background, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
        <Setter Property="Foreground" Value="{Binding Foreground, 
                    RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <Path Width="46" Height="32" StrokeThickness="1" Stroke="{TemplateBinding Foreground}" Data="M 18,15 H 28" Margin="0,2,0,0"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{x:Static SystemColors.ControlLightLightBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsMousePressedForeground}"/>
                            <Setter Property="Background" Value="{DynamicResource SystemButtonsMousePressedBackground}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, 
                                AncestorType={x:Type Window}}}" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource SystemButtonsInactiveForeground}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--BasedOn="{StaticResource {x:Type MenuItem}}"-->
    <!--<Style x:Key="MenuItemKey" TargetType="{x:Type Control}"  >
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate>
                    <HeaderedItemsControl/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    <Style x:Key="MenuItemKey_old" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}" >
        <Setter Property="Header" Value="{Binding Header}" />
        <Setter Property="Icon" Value="{Binding Icon}"/>
        <Setter Property="IsCheckable" Value="{Binding IsCheckable}" />
        <Setter Property="IsChecked" Value="{Binding IsChecked}" />
        <Setter Property="IsEnabled" Value="{Binding IsEnable}" />
        <Setter Property="Visibility" Value="{Binding Visibility}" />
        <Setter Property="IsSubmenuOpen" Value="{Binding IsSubmenuOpen}"/>
        <Setter Property="Command" Value="{Binding Command}"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToolBarTray}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Header}" Value="{x:Null}">
                <Setter Property="Template" >
                    <Setter.Value>
                        <ControlTemplate>
                            <Separator Style="{StaticResource {x:Static MenuItem.SeparatorStyleKey}}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Header}" Value="{x:Static res:Resources.m_Hidden}"/>
                    <Condition Binding="{Binding IsEnable}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="Red"/>
            </MultiDataTrigger>
            <!--<DataTrigger Binding="{Binding IsSubmenuOpenedCommand}" Value="True">
                <Setter Property="SubmenuOpenedParameter" Value="{Binding RelativeSource={x:Static RelativeSource.Self}}"/>
                <Setter Property="SubmenuOpenedCommand" Value="{Binding SubmenuOpenedCommand}"/>
            </DataTrigger>-->
            <!--<DataTrigger Binding="{Binding IsSubmenuOpenedCommand}" Value="False">
                <Setter Property="Command" Value="{Binding Command}"/>
            </DataTrigger>-->
        </Style.Triggers>
    </Style>
    <!--<Style x:Key="MenuItemExKEy2" TargetType="{x:Type c:ExMenuItem}" BasedOn="{StaticResource MenuItemExKEy}" >
        <Style.Triggers>
            <DataTrigger Binding="{Binding Header}" Value="{x:Static res:Resources.m_Hidden}">
                <Setter Property="ItemContainerStyle" Value="{StaticResource MenuItemExKEy}" />
                <Setter Property="IsChecked" Value="True"/>

            </DataTrigger>
       </Style.Triggers>
    </Style>-->    
    <!--BasedOn="{DynamicResource ResourceKey={x:Static ToolBar.ButtonStyleKey}}"-->
    <!--<Button x:Key="tolButton1" Style="{StaticResource ResourceKey={x:Static ToolBar.ButtonStyleKey} }"
                                    Command="{Binding Command}"
                                    x:Shared="False"    
                                    IsEnabled="{Binding IsEnable}"
                                    Content="{Binding Header}">
        <Button.ContentTemplate>
            <DataTemplate>
                <Image Source="{Binding IconSource}" Width="16" Height="16" />
            </DataTemplate>
        </Button.ContentTemplate>
    </Button>-->
    <Style x:Key="tolMenu" 
           TargetType="{x:Type Menu}" 
           BasedOn="{StaticResource ResourceKey={x:Static ToolBar.MenuStyleKey}}"/>
    
    <Style x:Key="tolButton" 
           TargetType="{x:Type Button}" 
           BasedOn="{StaticResource ResourceKey={x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="IsEnabled" Value="{Binding IsEnable}" />
        <Setter Property="Visibility" Value="{Binding Visibility}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock DataContext="{Binding Path=DataContext, 
                                                     RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                    AncestorType={x:Type Button}}}" 
                               Text="{Binding Header}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IconSourceEnable}" Value="True">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image  DataContext="{Binding Path=DataContext, 
                                                          RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                         AncestorType={x:Type Button}}}"  
                                    Source="{Binding IconSource}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding IconSourceEnable}" Value="False">
                <Setter Property="Content">
                    <Setter.Value>
                         <TextBlock Text="{Binding Header}"/>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="{x:Type c:CommandMenuItemVM}">
                <Setter Property="Command" Value="{Binding Command}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
        
    <DataTemplate x:Key="tolButtonDataTemplate" >
        <Button Style="{StaticResource tolButton}"/>
    </DataTemplate>


    <!--<ControlTemplate x:Key="MenuEXTemplate1" TargetType="{x:Type c:MenuEX}" >
        <Border Background="{TemplateBinding Background}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" 
                Padding="{TemplateBinding Padding}" 
                SnapsToDevicePixels="true">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Border>
    </ControlTemplate>-->


    <!--<Style x:Key="MenuKey"  TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}">
        <Setter Property="DataContext" Value="{Binding MenuViewModel}"/>
        <Setter Property="ItemsSource" Value="{Binding Items}"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType ="{x:Type c:ExMenuItem}" BasedOn="{StaticResource MenuItemExKEy}" />
            </Setter.Value>
        </Setter>
        <Style.Resources>

           <HierarchicalDataTemplate DataType="{x:Type vm:MenuItemViewModel}" ItemsSource="{Binding Items}" >
                <HierarchicalDataTemplate.ItemContainerStyle>
                    <Style TargetType ="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemExKEy}" />
                </HierarchicalDataTemplate.ItemContainerStyle>
            </HierarchicalDataTemplate>
        </Style.Resources>
    </Style>-->

</ResourceDictionary>